{"version":3,"sources":["serviceWorker.js","Text.js","Options.js","Background.js","Game.js","index.js"],"names":["Boolean","window","location","hostname","match","Text","text","className","Options","nextScene","this","props","change","key","altKey","options","map","item","i","onClick","click","href","id","Component","Background","image","background_color","fade1","fadeIn","fade2","fadeOut","style","animation","backgroundColor","alt","src","Game","state","data","levelsData","loaded","level","reload","changeLevel","number","setState","tmp","option","value","split","re","forEach","element","push","parseInt","color","Object","entries","fetch","then","json","_","init","display","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5127a15e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n// generates text where ever (top/bottom/center)\r\n\r\nexport const Text = ({text}) => {\r\n    if (text != null) {\r\n        return (\r\n            <div className=\"typing_text\">\r\n                <p>{text}</p>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {Text} from './Text'\r\n// generates options\r\n\r\nclass Options extends Component {\r\n\r\n    click(nextScene) {\r\n        this.props.change(nextScene)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"options\">\r\n                <Text key={'text_' + this.props.altKey} text={this.props.text} />\r\n                {/* creates choices */}\r\n                <ul>\r\n                    {this.props.options.map((item, i) => {\r\n                        return (\r\n                            <a onClick={() => this.click(item[1])} key={`options-${i}`} href=\"#/\"><li className=\"pick\" id={\"choice-\"+item[1]}><p><b>{item[0]}</b></p></li></a>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Options\r\n","import React from 'react';\r\n// generates image or colored background\r\n\r\nexport const Background = ({image, background_color, fadeIn, fadeOut}) => {\r\n    // if fade in/out, fade in/out in 1 second, else 0 seconds\r\n    let fade1 = fadeIn ? \"1s\": \"0s\"\r\n    let fade2 = fadeOut ? \"1s\": \"0s\"\r\n\r\n    // background is centered and should cover the whole screen\r\n    return (\r\n        <div className=\"background\" style={{animation: \"fadeout\", fade2, backgroundColor: background_color}}>\r\n            <img alt={image ? image: \"display image is missing... Did you drag image into the image folder and have the right image extension specified?\"} src={image ? image: \"\"} style={{animation: \"fadein\", fade1}}></img>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Options from './Options'\r\nimport {Background} from './Background'\r\n// main class\r\n\r\n\r\nclass Game extends Component {\r\n    // a Game object that acts like the main container for this game \"engine\"\r\n\r\n    // state var containing all the levels and necessary info on those levels\r\n    state = {\r\n        data: [],\r\n        levelsData: [],\r\n        loaded: false,\r\n        level: 1,\r\n        reload: false\r\n    }\r\n\r\n\r\n    changeLevel = (number) => {\r\n        // changes level given the number\r\n        this.setState({level: number})\r\n\r\n        // rerender game component\r\n        this.setState({reload: !this.state.reload})\r\n    }\r\n\r\n    init() {\r\n        // once we get the json, this is called\r\n\r\n        // for each level, save to state\r\n        for (let tmp of Object.entries(this.state.data)) {\r\n            let option = tmp[1][4].value\r\n            let options = []\r\n            // split by \\n and then separate by [\r\n            option = option.split(\"\\n\")\r\n\r\n            // regular expression to get text and\r\n            let re = /(.+)\\[\\s*(\\d+)\\s*\\]/\r\n            option.forEach(element => {\r\n                let match = element.match(re)\r\n                options.push([match[1], parseInt(match[2])])\r\n            });\r\n\r\n            let level = {\r\n                text: tmp[1][1].value,\r\n                image: tmp[1][2].value,\r\n                color: tmp[1][3].value,\r\n                options: options\r\n            }\r\n            this.state.levelsData.push(level)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // gets json and calls all the necessary inits\r\n        this.setState({loaded: true})\r\n        fetch('json/data.json')\r\n            .then(data => data.json())\r\n            .then(data => this.setState({data}))\r\n            .then(_ => this.init())\r\n            .then(data => this.setState({data, loaded: false}))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main_content\">\r\n                {this.state.loaded ? \"loading... Perhaps you are not running it on a server\":\r\n                this.state.levelsData.map((item, i) => {\r\n                    if (i + 1 === this.state.level){\r\n                        return (\r\n                            <span id=\"solid\" className={\"scene-\" + (i + 1)} style={{display: i + 1 === this.state.level ? 'hidden': null}} key={`scene-${i}`}>\r\n                                <Background key={'back_' + i} image={item.image ? \"images/\" + item.image : null} background_color={item.color} fadeIn={true} fadeOut={true} />\r\n                                <Options key={'options_' + i} altKey={i} options={item.options} text={item.text} change={this.changeLevel} />\r\n                            </span>\r\n                        )\r\n                    } else {return ''}\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './Game'\n// WARNING: don't touch the index, go to the Game.js to do modifications\n\nReactDOM.render(\n\t<Game key=\"game\" />,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}